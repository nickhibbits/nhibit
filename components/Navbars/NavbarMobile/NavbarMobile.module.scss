@use "@/styles/mediaQueries.scss";
@use "@/components/Navbars/navbarMixins.scss";
@use "@/styles/variables.scss";
@use "@/styles/glassmorphism.scss";
@use "@/styles/hamburgers/hamburgers.scss";

.nav {
  width: 100vw;
  @include navbarMixins.primaryStyle;
  display: relative;

  @include mediaQueries.tablet-large {
    display: none;
  }
}

.svgWrapper {
  &_menu {
    display: flex;
    flex-direction: row;
    justify-content: flex-end;
    align-items: center;
    z-index: 4;
    height: 100%;
  }

  &_x {
    display: flex;
    flex-direction: row;
    justify-content: flex-end;
    align-items: center;
    height: variables.$nav-height;
  }
}

.options_container {
  position: fixed;
  inset: 0 0 0 0;
  background-color: variables.$bg_dark_transparent_2;

  @include glassmorphism.glassmorphismBase;

  @include mediaQueries.tablet-large {
    display: none;
  }
}

.options_wrapper {
  z-index: 5;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  gap: 2rem;
  font-size: variables.$fs-700;
}

.option_socials_wrapper {
  height: 90%;
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
  gap: 3rem;
}

.anchor {
  @include navbarMixins.optionStyle;
}

$hamburger-padding-x: 15px !default;
$hamburger-padding-y: 15px !default;
$hamburger-layer-width: 40px !default;
$hamburger-layer-height: 4px !default;
$hamburger-layer-spacing: 6px !default;
$hamburger-layer-color: #000 !default;
$hamburger-layer-border-radius: 4px !default;
$hamburger-hover-opacity: 0.7 !default;
$hamburger-active-layer-color: $hamburger-layer-color !default;
$hamburger-active-hover-opacity: $hamburger-hover-opacity !default;

// To use CSS filters as the hover effect instead of opacity,
// set $hamburger-hover-use-filter as true and
// change the value of $hamburger-hover-filter accordingly.
$hamburger-hover-use-filter: false !default;
$hamburger-hover-filter: opacity(50%) !default;
$hamburger-active-hover-filter: $hamburger-hover-filter !default;

.hamburger {
  overflow: hidden;

  .hamburger_inner {
    transition: background-color 0.125s 0.175s ease-in;

    &::before {
      // content: "";
      left: 0;

      transition: transform 0.125s cubic-bezier(0.6, 0.04, 0.98, 0.335),
        top 0.05s 0.125s linear, left 0.125s 0.175s ease-in;
    }

    &::after {
      // content: "";
      top: ($hamburger-layer-height) + ($hamburger-layer-spacing);
      right: 0;
      transition: transform 0.125s cubic-bezier(0.6, 0.04, 0.98, 0.335),
        top 0.05s 0.125s linear, right 0.125s 0.175s ease-in;
    }
  }

  &.is-active {
    .hamburger_inner {
      transition-delay: 0s;
      transition-timing-function: ease-out;
      background-color: transparent !important;

      &::before {
        left: $hamburger-layer-width * -2;
        top: $hamburger-layer-width * -2;
        transform: translate3d(
            $hamburger-layer-width * 2,
            $hamburger-layer-width * 2,
            0
          )
          rotate(45deg);
        transition: left 0.125s ease-out, top 0.05s 0.125s linear,
          transform 0.125s 0.175s cubic-bezier(0.075, 0.82, 0.165, 1);
      }

      &::after {
        right: $hamburger-layer-width * -2;
        top: $hamburger-layer-width * -2;
        transform: translate3d(
            $hamburger-layer-width * -2,
            $hamburger-layer-width * 2,
            0
          )
          rotate(-45deg);
        transition: right 0.125s ease-out, top 0.05s 0.125s linear,
          transform 0.125s 0.175s cubic-bezier(0.075, 0.82, 0.165, 1);
      }
    }
  }
}
